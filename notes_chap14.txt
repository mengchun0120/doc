Chapter 14 Overloaded Operations and Conversions

1. Basics
    1.1 General requirements
        * No default parameter
        * Must be a member function or at least one parameter is class type
        * For member operator function, the left operand must be the class type
    1.2 Operators that should not be overloaded
        * && ||
            Short-circuit guanrantee not available for overladed version
        * , &
            Have built-in meaning by language
   1.3 General guidelines
        * Whether to define an operator?
            <<, >> input/output
            ==, != equality/inequality
            < ordering
        * Member or non-member?
            [] () -> = MUST be member
            Compound assignment ought to be member, but not required
            ++, --, deference (*) ought to be member
            Symmetrical operators that need conversions should be non-member

2. Input/Output operator
    2.1 Output operator
        * How to define
        * Minimal formatting
    2.2 Input operator
        * How to define
        * Must handle input failure
        * Use failbit to indicate error

3. Arithmetic and relational operators
    3.1 Equality
        * Prefer == to named function
        * Define both == and !=
        * Must satisfy transitive property
        * Delegate the work to another
    3.2 Relational
        * Define < if used with associative container
        * If == is also defined, < must be consistent with ==

4. Assignment
    4.1 Guidelines
        * = must be member
        * Compound assignment should be member
        * Return reference

5. Subscript
    5.1 Guidelines
        * Must be member
        * Should define both const & non-const versions

6. Increment & decrement (++ --)
    8.1 How to differentiate prefix from postfix?
    8.1 Guidelines
        * Should define as member
        * Define both prefix & postfix
        * Prefix should return reference to the incremented/decremented object
        * Postfix should return old value

7. Member access (*, ->)
    9.1 How is -> processed by the compiler?
    9.2 Guidelines
        * Should define as const member
        * -> must return a pointer or an object that defines ->

8. Function call ()
    8.1 Function object
        * What is function object?
        * Where is it used mostly?
        * Must be member
    8.2 lambda
        * Compiler creates unnamed object of unnamed type
        * Has deleted default constructor/assignment, default constructor
    8.3 Library function
        * Defined in functional header
        * Calls corresponding operator of underlying class
        * Can be used for pointers
        * Associative containers use less_than<T>. They can use pointer as key
    8.4 Callable objects and function
        * What are the callable objects supported by C++?
        * What is a call signature?
        * function can be used to store callable objects with the same call
          signature

9. Conversion operator
    9.1 General requirements
        * Must be member, empty parameter list, no return type, should be const
        * Cannot covert to function or array
        * Can conver to pointer
    9.2 explicit conversion
        * Compiler will not use explicit conversion for implicit conversion
        * Exception: when used in condition
    9.3 Guidelines
        * Don't define mutually converting classes
        * Avoid conversion to arithmetic types
        * Define conversion to bool as explicit
